{"version":3,"sources":["App.js","index.js"],"names":["App","React","currentAccount","setCurrentAccount","message","setMessage","allWaves","setAllWaves","contractAddress","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWave","count","toNumber","gasLimit","waveTxn","hash","wait","getAllWaves","waves","wavesCleaned","forEach","push","address","waver","timestamp","Date","onNewWave","from","prevState","on","off","className","style","width","height","marginTop","fontSize","borderWidth","borderColor","borderRadius","padding","placeholder","type","value","onChange","e","target","onClick","marginBottom","map","index","key","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41ab9cb6.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { ethers, providers } from \"ethers\";\nimport \"./App.css\";\nimport abi from \"./utils/WavePortal.json\";\n\nexport default function App() {\n  const [currentAccount, setCurrentAccount] = React.useState(\"\");\n  const [message, setMessage] = React.useState();\n  const [allWaves, setAllWaves] = React.useState([]);\n  const contractAddress = \"0xbC8958d9f9edEeE8D5CF26D8a5ac9549f2A984Ae\";\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found the authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {}\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {}\n  };\n  React.useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        let count = await wavePortalContract.getTotalWave();\n        console.log(\"Retreive total wave count...\", count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave(message, {\n          gasLimit: 300000,\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined --\", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWave();\n        console.log(\"Retreived total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ehtereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        const waves = await wavePortalContract.getAllWaves();\n\n        let wavesCleaned = [];\n        waves.forEach((wave) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          });\n        });\n\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  React.useEffect(() => {\n    let wavePortalContract;\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves((prevState) => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    };\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      wavePortalContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      );\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n\n  const handleChange = (e) => {\n    setMessage(e.target.value);\n  };\n  return (\n    <React.Fragment>\n      <div className=\"mainContainer\">\n        <div className=\"dataContainer\">\n          <div className=\"header\">ðŸ‘‹ Hey there!</div>\n\n          <div className=\"bio\">\n            I am Abhishek and I am a React Native Developer! Now shifting my\n            learning curve towards Ethereum and Solidity. Connect your Ethereum\n            wallet and wave at me!\n          </div>\n          <form>\n            <textarea\n              style={{\n                width: \"400px\",\n                height: \"300px\",\n                marginTop: \"20px\",\n                fontSize: \"18px\",\n                borderWidth: \"5px\",\n                borderColor: \"#d19c08\",\n                borderRadius: \"5px\",\n                padding: \"10px\",\n              }}\n              placeholder=\"Enter your beautiful message here :)\"\n              type=\"text\"\n              value={message}\n              onChange={handleChange}\n            />\n          </form>\n          <button className=\"waveButton\" onClick={wave}>\n            Wave at Me\n          </button>\n          {!currentAccount && (\n            <button className=\"waveButton\" onClick={connectWallet}>\n              Connect to wallet\n            </button>\n          )}\n          <button\n            className=\"waveButton\"\n            style={{ marginBottom: \"50px\" }}\n            onClick={getAllWaves}\n          >\n            Get History of All Waves\n          </button>\n        </div>\n      </div>\n      {allWaves.map((wave, index) => {\n        return (\n          <div className=\"history\">\n            <div key={index}>\n              <div style={{ marginBottom: \"10px\" }}>\n                Address: {wave.address}\n              </div>\n              <div style={{ marginBottom: \"10px\" }}>\n                Time: {wave.timestamp.toString()}\n              </div>\n              <div style={{ marginBottom: \"10px\" }}>\n                Message: {wave.message}\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}